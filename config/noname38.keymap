/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3
#define GME 4

&lt { quick-tap-ms = <200>; };

&mt { quick-tap-ms = <200>; };

/ {
    combos {
        compatible = "zmk,combos";

        to_game_layer {
            bindings = <&to 4>;
            key-positions = <11 23>;
            layers = <0>;
        };

        to_default_layer {
            bindings = <&to 0>;
            key-positions = <2 12>;
            layers = <4>;
        };

        combo_delete {
            bindings = <&kp DEL>;
            key-positions = <38 33 34>;
            layers = <0>;
        };

        combo_backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <32 33>;
            layers = <0>;
        };

        combo_copy {
            bindings = <&kp LC(C)>;
            key-positions = <1 2 3>;
            layers = <0>;
        };

        combo_paste {
            bindings = <&kp LC(V)>;
            key-positions = <1 3>;
            layers = <0>;
        };

        combo_cut {
            bindings = <&kp LC(X)>;
            key-positions = <2 1>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            //        |   ~  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |  F11   | 
            //        | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |CTRL/'|
            //        | LALT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | RALT |
            //                           | RSE | SPC | LWR |   | LWR | BKSP | RSE |

            bindings = <
&mt LEFT_GUI Q  &kp W  &kp E           &kp R                 &kp T  &kp Y      &kp U  &kp I          &kp O    &kp P
&kp A           &kp S  &kp D           &kp F                 &kp G  &kp H      &kp J  &kp K          &kp L    &kp SEMI                    &kp ENTER
&kp Z           &kp X  &kp C           &kp V                 &kp B  &kp N      &kp M  &kp COMMA      &kp DOT  &kp RIGHT_SHIFT
&lt 2 RCTRL            &lt 1 LEFT_ALT  &mt LEFT_SHIFT SPACE         &lt 2 ESC         &kp BACKSPACE  &kp DEL                   &kp RCTRL
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |     |  _  |  F1 |  F2 |  F3 |  F4 |  F5 |   |  F6 |  F7 |  F8 |  F9 | F10 | F11 | F12 |
            //       |  +  |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |  -  |
            //       |  =  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |     |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp F1           &kp F2       &kp F3    &kp F4                &kp F5       &kp F6     &kp F7         &kp F8        &kp F9                &kp F10
&kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR            &kp PERCENT  &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS          &none
&kp N1           &kp N2       &kp N3    &kp N4                &kp N5       &kp N6     &kp N7         &kp N8        &kp N9                &kp N0
&none                         &none     &mt LEFT_SHIFT SPACE               &tog 3                    &trans        &none                                        &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |     | NMLK |  /  |  7  |  8  |  9  |  -  |   | VOLU| HOME| PRSC| PGUP| SCLK| CLCK|     |
            //       | CTRL |  *  |  4  |  5  |  6  |  +  |   | MUT | LEFT|  UP | RGHT| INS | APP |
            //       |      |  0  |  1  |  2  |  3  |  .  |   | VOLD| END | DOWN| PGDN| PAUS|     |
            //                          |     |     | ADJ |   | ADJ |     |     |

            bindings = <
&kp KP_NUM  &kp SLASH  &kp N1  &kp N2                &kp N3  &kp MINUS  &kp C_VOL_UP       &none     &kp UP    &none
&kp EQUAL   &kp ASTRK  &kp N4  &kp N5                &kp N6  &kp PLUS   &kp K_MUTE         &kp LEFT  &kp DOWN  &kp RIGHT          &none
&none       &kp N0     &kp N7  &kp N8                &kp N9  &kp DOT    &kp C_VOLUME_DOWN  &none     &none     &none
&none                  &tog 3  &mt LEFT_SHIFT SPACE          &none                         &trans    &trans               &trans
            >;
        };

        adjust_layer {
            // -----------------------------------------------------------------------------------------
            // | RST | BLDR |     |     |     |     |     |   |     |     |     |     |     | BLDR | RST |
            //       | BTCLR| BT0 | BT1 | BT2 | BT3 | BT4 |   | BT4 | BT3 | BT2 | BT1 | BT0 | BTCLR|
            //       |      |     |     |     |     |     |   |     |     |     |     |     |      |
            //                          |     |     |     |   |     |     |     |

            bindings = <
&bootloader   &sys_reset    &studio_unlock  &none         &none   &none  &none  &none   &none   &none
&bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &trans  &none  &none  &trans  &none   &none         &none
&none         &none         &none           &none         &none   &none  &none  &none   &none   &none
&out OUT_TOG                &none           &none                 &none         &none   &trans         &none
            >;
        };

        game_layer {
            bindings = <
&kp ESCAPE      &kp N1  &kp N2  &kp N3     &kp N4  &kp NUMBER_5  &kp F1  &kp F2  &trans  &kp C_VOLUME_UP
&kp LC(TAB)     &kp Q   &kp W   &kp E      &kp R   &kp G         &kp T   &none   &none   &kp C_VOLUME_DOWN         &trans
&kp LEFT_SHIFT  &kp A   &kp S   &kp D      &kp B   &kp F         &none   &none   &none   &trans
&kp LCTRL               &trans  &kp SPACE          &kp K                 &none   &none                      &none
            >;
        };
    };
};
